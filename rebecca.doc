SOURCE FILES:
=============

utilities.sml:  General-purpose functional programming utilities

maybe.sml:      A means of tagging values as being valid or invalid

mappings.sml:   Functions for crating small (linear search) and large (hash
                table) finite discrete mappings

state.sml:      Some global values, and the call stack (which is used only
                for error reporting)

errors.sml:     Error-raising routines

messages.sml:   Output formatting for error messages

rubytype.sml:   Abstract rebecca grammar; types "defn", "exp", "const", "io"

ios.sml:        Functions for manipulating "io"s (i.e. patterns in $iwre
                declarations)

base.sml:       Parsing support

ruby.yacc:      MLyacc source for parser

ruby.lex:       MLlex source for lexical parser

ruby.sml:       More parsing support

circuittype.sml: The final compiled form of rebecca programs; types "device",
                "exprtype", "expr", "dir", "gate", "relation", "circuit",
                "pcircuit"

exprs.sml:      Functions for manipulating exprs (i.e. constant and variable
                wire structures)

values.sml:     Values generated by rebecca programs; type constructors
                CONSTANT, CIRCUIT, FUNCTION

show.sml:       Functions for printing basic values and devices

compose.sml:    Sequential and parallel composition of circuits

compileExp.sml: Functions for converting "exp"s (i.e. ruby source expressions)
                into values (i.e. CONSTANTs, CIRCUITs, FUNCTIONs)

wiringPrims.sml: Built-in wiring primitives

arithPrims.sml: Built-in constant arithmetic primitives

primTypes.sml:  Functions for giving primitive functions the right parameter
                types

data.sml:       Functions for manipulating data ("&id") values

compileDef.sml: Functions for converting "def"s (i.e. ruby source definitions)
                into symbol table entries, and looking up those entries; also
                looking up primitive definitions

ioAlias.sml:    Functions for matching domain and range structures to specific
                wires and constants given in a "&.._io = <..>" declaration

printrbs.sml
printalx.sml
printblk.sml
printxnf.sml:   Pretty-printing

order.sml:      Routines for ordering the gates of a circuit into a list of
                lists of gates, representing a sequence of parallel blocks

main.sml:       The toplevel "rc" function, with command-line parsing and
                error handling
