(*#line 65.9 "ruby.lex"*)functor RubyLexFun(structure Tokens : Ruby_TOKENS)(*#line 1.1 "ruby.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "ruby.lex"*)(* Ruby lexer for sml-lex 
   tjt: updated for SML/NJ 110+
   - change character consts from 1-elem strings to SML character literals
     e.g. "." => #"."
   - similarly, chnage ator.splitdot to suit explode returning a list of
	 character literals rather than a list of strings
	 i.e. is^x => is ^ str(x)
   - revfold => List.foldr
   - lex_error => Errors.lex_error
   - seems to work
*)
(* for Spectrum, using {} to take place of <> 
comment = "#"[^\n]* | "{"[^\}]*"}";
*)

structure Tokens = Tokens

type pos = (int * int)
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) token

val pos = ref (1,1)
val eof = fn() => Tokens.EOF(!pos,!pos)

fun incline() = let val (l,c) = !pos in (pos := (l+1,c); !pos) end
fun inccol (n:int) = let val (l,c) = !pos in (pos := (l,c+n); !pos) end
fun zerocol () = let val (l,c) = !pos in (pos := (l,1); !pos) end
fun zeroline () = let val (l,c) = !pos in (pos := (1,c); !pos) end
fun strlen s = length (explode s)
fun strtl s = implode (tl (explode s))
fun stripQuotes s = implode (rev (tl (rev (tl (explode s)))))

fun Val base str =
    (foldr (fn(a,r)=> (if ord(a)>ord(#"9") then ord(a)-ord(#"a")+10
                         else ord(a)-ord(#"0")) + base*r)
     0 str)

fun todigit a = if (ord(a) <= ord(#"9") andalso ord(a) >= ord(#"0"))
                  then ord(a) - ord(#"0") else 0 ;

fun atoi a = let fun pow x 0 = 1
                   | pow x n = x * (pow x (n-1)) ;
                 fun sum [] n = 0
                   | sum (x::xs) n = x * (pow 10 n) + (sum xs (n+1))
             in (sum (rev (map todigit (explode a))) 0)
             end;

fun tofract []      = 0.0
  | tofract (x::xs) = (real (todigit x) + tofract xs) / 10.0;

fun ator a = let fun splitdot (   [],is) = real (atoi is)
                   | splitdot (x::xs,is) = if x <> #"."
                                             then splitdot (xs,is^str(x))
                                             else real (atoi is) + tofract xs
             in
               splitdot (explode a,"")
             end;

fun stob "T" = true
  | stob "F" = false;


(*#line 69.1 "ruby.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\093\095\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\093\003\090\088\079\003\077\010\076\075\074\073\072\071\070\067\
\\063\063\063\063\063\063\063\063\063\063\003\062\057\056\055\010\
\\003\010\010\010\010\049\048\010\010\040\010\010\037\010\010\010\
\\010\010\010\031\027\010\024\010\010\010\010\021\019\018\013\010\
\\012\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\003\008\003\004\003\
\\003"
),
 (4, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\025\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\026\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\028\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\029\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\030\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\032\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\033\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\034\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\035\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\036\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\038\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\039\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\047\011\011\011\011\011\011\011\041\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\042\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\043\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\044\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\045\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\046\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\052\011\050\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\051\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\053\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\011\
\\000\011\011\011\011\054\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\
\\000\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\000\000\000\000\078\
\\000\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\
\\078\078\078\078\078\078\078\078\078\078\000\000\000\000\000\078\
\\000\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\000\000\000\000\078\
\\000\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\000\078\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\085\080\080\080\080\081\080\080\080\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\082\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\083\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\084\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\086\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (86, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\080\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\000\000\000\000\080\
\\000\080\080\080\080\080\080\080\080\080\080\080\087\080\080\080\
\\080\080\080\080\080\080\080\080\080\080\080\080\000\080\000\000\
\\000"
),
 (88, 
"\089\089\089\089\089\089\089\089\089\089\000\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\089\
\\089"
),
 (90, 
"\091\091\091\091\091\091\091\091\091\091\000\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\092\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\000\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091"
),
 (93, 
"\000\000\000\000\000\000\000\000\000\094\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 173)], trans = 0},
{fin = [(N 83),(N 173)], trans = 4},
{fin = [(N 158)], trans = 5},
{fin = [], trans = 6},
{fin = [(N 171)], trans = 6},
{fin = [(N 173)], trans = 8},
{fin = [(N 106)], trans = 0},
{fin = [(N 151),(N 173)], trans = 10},
{fin = [(N 151)], trans = 10},
{fin = [(N 136),(N 173)], trans = 0},
{fin = [(N 103),(N 173)], trans = 13},
{fin = [], trans = 14},
{fin = [(N 95)], trans = 0},
{fin = [(N 101)], trans = 0},
{fin = [(N 98)], trans = 0},
{fin = [(N 25),(N 173)], trans = 0},
{fin = [(N 108),(N 173)], trans = 19},
{fin = [(N 111)], trans = 0},
{fin = [(N 23),(N 173)], trans = 21},
{fin = [], trans = 22},
{fin = [(N 123)], trans = 0},
{fin = [(N 151),(N 173)], trans = 24},
{fin = [(N 151)], trans = 25},
{fin = [(N 79),(N 151)], trans = 10},
{fin = [(N 132),(N 151),(N 173)], trans = 27},
{fin = [(N 151)], trans = 28},
{fin = [(N 151)], trans = 29},
{fin = [(N 59),(N 151)], trans = 10},
{fin = [(N 151),(N 173)], trans = 31},
{fin = [(N 151)], trans = 32},
{fin = [(N 151)], trans = 33},
{fin = [(N 151)], trans = 34},
{fin = [(N 151)], trans = 35},
{fin = [(N 51),(N 151)], trans = 10},
{fin = [(N 151),(N 173)], trans = 37},
{fin = [(N 151)], trans = 38},
{fin = [(N 68),(N 151)], trans = 10},
{fin = [(N 151),(N 173)], trans = 40},
{fin = [(N 71),(N 151)], trans = 41},
{fin = [(N 151)], trans = 42},
{fin = [(N 151)], trans = 43},
{fin = [(N 151)], trans = 44},
{fin = [(N 151)], trans = 45},
{fin = [(N 44),(N 151)], trans = 10},
{fin = [(N 54),(N 151)], trans = 10},
{fin = [(N 134),(N 151),(N 173)], trans = 10},
{fin = [(N 151),(N 173)], trans = 49},
{fin = [(N 151)], trans = 50},
{fin = [(N 75),(N 151)], trans = 10},
{fin = [(N 151)], trans = 52},
{fin = [(N 151)], trans = 53},
{fin = [(N 64),(N 151)], trans = 10},
{fin = [(N 15),(N 173)], trans = 0},
{fin = [(N 17),(N 173)], trans = 0},
{fin = [(N 13),(N 173)], trans = 57},
{fin = [], trans = 58},
{fin = [(N 119)], trans = 0},
{fin = [], trans = 60},
{fin = [(N 115)], trans = 0},
{fin = [(N 81),(N 173)], trans = 0},
{fin = [(N 154),(N 173)], trans = 63},
{fin = [(N 154)], trans = 63},
{fin = [], trans = 65},
{fin = [(N 164)], trans = 65},
{fin = [(N 91),(N 173)], trans = 67},
{fin = [(N 126)], trans = 68},
{fin = [(N 130)], trans = 0},
{fin = [(N 19),(N 173)], trans = 0},
{fin = [(N 87),(N 173)], trans = 0},
{fin = [(N 21),(N 173)], trans = 0},
{fin = [(N 85),(N 173)], trans = 0},
{fin = [(N 89),(N 173)], trans = 0},
{fin = [(N 11),(N 173)], trans = 0},
{fin = [(N 9),(N 173)], trans = 0},
{fin = [(N 173)], trans = 77},
{fin = [(N 148)], trans = 78},
{fin = [(N 173)], trans = 79},
{fin = [(N 144)], trans = 80},
{fin = [(N 144)], trans = 81},
{fin = [(N 144)], trans = 82},
{fin = [(N 144)], trans = 83},
{fin = [(N 31),(N 144)], trans = 80},
{fin = [(N 144)], trans = 85},
{fin = [(N 144)], trans = 86},
{fin = [(N 36),(N 144)], trans = 80},
{fin = [(N 7),(N 173)], trans = 88},
{fin = [(N 7)], trans = 88},
{fin = [(N 173)], trans = 90},
{fin = [], trans = 90},
{fin = [(N 140)], trans = 0},
{fin = [(N 4),(N 173)], trans = 93},
{fin = [(N 4)], trans = 93},
{fin = [(N 1)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 78.28 "ruby.lex"*)incline(); zerocol(); lex()(*#line 809.1 "ruby.lex.sml"*)
)
| 101 => let val yytext=yymktext() in (*#line 109.28 "ruby.lex"*)Tokens.POSTFIX(yytext, !pos, inccol 2)(*#line 811.1 "ruby.lex.sml"*)
 end
| 103 => let val yytext=yymktext() in (*#line 110.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 1)(*#line 813.1 "ruby.lex.sml"*)
 end
| 106 => let val yytext=yymktext() in (*#line 111.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 2)(*#line 815.1 "ruby.lex.sml"*)
 end
| 108 => let val yytext=yymktext() in (*#line 112.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 1)(*#line 817.1 "ruby.lex.sml"*)
 end
| 11 => ((*#line 82.28 "ruby.lex"*)Tokens.RPAREN(!pos, inccol 1)(*#line 819.1 "ruby.lex.sml"*)
)
| 111 => let val yytext=yymktext() in (*#line 113.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 2)(*#line 821.1 "ruby.lex.sml"*)
 end
| 115 => let val yytext=yymktext() in (*#line 114.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 3)(*#line 823.1 "ruby.lex.sml"*)
 end
| 119 => let val yytext=yymktext() in (*#line 115.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol 3)(*#line 825.1 "ruby.lex.sml"*)
 end
| 123 => let val yytext=yymktext() in (*#line 116.28 "ruby.lex"*)Tokens.ID(yytext, !pos, inccol 3)(*#line 827.1 "ruby.lex.sml"*)
 end
| 126 => let val yytext=yymktext() in (*#line 117.28 "ruby.lex"*)Tokens.ID(yytext, !pos, inccol 2)(*#line 829.1 "ruby.lex.sml"*)
 end
| 13 => ((*#line 83.28 "ruby.lex"*)Tokens.LANGLE(!pos, inccol 1)(*#line 831.1 "ruby.lex.sml"*)
)
| 130 => let val yytext=yymktext() in (*#line 118.28 "ruby.lex"*)Tokens.ID(yytext, !pos, inccol 3)(*#line 833.1 "ruby.lex.sml"*)
 end
| 132 => let val yytext=yymktext() in (*#line 119.28 "ruby.lex"*)Tokens.BOOLEAN(stob yytext, !pos, inccol 1)(*#line 835.1 "ruby.lex.sml"*)
 end
| 134 => let val yytext=yymktext() in (*#line 120.28 "ruby.lex"*)Tokens.BOOLEAN(stob yytext,!pos, inccol 1)(*#line 837.1 "ruby.lex.sml"*)
 end
| 136 => ((*#line 121.28 "ruby.lex"*)Tokens.QUOTE(!pos, inccol 1)(*#line 839.1 "ruby.lex.sml"*)
)
| 140 => let val yytext=yymktext() in (*#line 122.28 "ruby.lex"*)Tokens.SYMBOL(stripQuotes yytext, !pos, inccol (strlen yytext))(*#line 841.1 "ruby.lex.sml"*)
 end
| 144 => let val yytext=yymktext() in (*#line 123.28 "ruby.lex"*)Tokens.INFIX(yytext, !pos, inccol (strlen yytext))(*#line 843.1 "ruby.lex.sml"*)
 end
| 148 => let val yytext=yymktext() in (*#line 124.28 "ruby.lex"*)Tokens.DID(yytext, !pos, inccol (strlen yytext))(*#line 845.1 "ruby.lex.sml"*)
 end
| 15 => ((*#line 84.28 "ruby.lex"*)Tokens.RANGLE(!pos, inccol 1)(*#line 847.1 "ruby.lex.sml"*)
)
| 151 => let val yytext=yymktext() in (*#line 125.28 "ruby.lex"*)Tokens.ID(yytext, !pos, inccol (strlen yytext))(*#line 849.1 "ruby.lex.sml"*)
 end
| 154 => let val yytext=yymktext() in (*#line 126.28 "ruby.lex"*)Tokens.INTEGER(atoi yytext,!pos,inccol (strlen yytext))(*#line 851.1 "ruby.lex.sml"*)
 end
| 158 => let val yytext=yymktext() in (*#line 127.28 "ruby.lex"*)Tokens.INTEGER(~(atoi (strtl yytext)),!pos,inccol (strlen yytext))(*#line 853.1 "ruby.lex.sml"*)
 end
| 164 => let val yytext=yymktext() in (*#line 128.28 "ruby.lex"*)Tokens.FLOAT(ator yytext, !pos, inccol (strlen yytext))(*#line 855.1 "ruby.lex.sml"*)
 end
| 17 => ((*#line 85.28 "ruby.lex"*)Tokens.EQUAL(!pos, inccol 1)(*#line 857.1 "ruby.lex.sml"*)
)
| 171 => let val yytext=yymktext() in (*#line 129.28 "ruby.lex"*)Tokens.FLOAT(~(ator (strtl yytext)), !pos, inccol (strlen yytext))(*#line 859.1 "ruby.lex.sml"*)
 end
| 173 => let val yytext=yymktext() in (*#line 130.28 "ruby.lex"*)Errors.lex_error (!pos, "Bad character: "^yytext);
                           inccol 1;
                           lex()(*#line 863.1 "ruby.lex.sml"*)
 end
| 19 => ((*#line 86.28 "ruby.lex"*)Tokens.DOT(!pos, inccol 1)(*#line 865.1 "ruby.lex.sml"*)
)
| 21 => ((*#line 87.28 "ruby.lex"*)Tokens.COMMA(!pos, inccol 1)(*#line 867.1 "ruby.lex.sml"*)
)
| 23 => ((*#line 88.28 "ruby.lex"*)Tokens.LBKT(!pos, inccol 1)(*#line 869.1 "ruby.lex.sml"*)
)
| 25 => ((*#line 89.28 "ruby.lex"*)Tokens.RBKT(!pos, inccol 1)(*#line 871.1 "ruby.lex.sml"*)
)
| 31 => ((*#line 90.28 "ruby.lex"*)Tokens.WIRE(!pos, inccol 5)(*#line 873.1 "ruby.lex.sml"*)
)
| 36 => ((*#line 91.28 "ruby.lex"*)Tokens.REL(!pos, !pos, inccol 4)(*#line 875.1 "ruby.lex.sml"*)
)
| 4 => let val yytext=yymktext() in (*#line 79.28 "ruby.lex"*)inccol (strlen yytext); lex()(*#line 877.1 "ruby.lex.sml"*)
 end
| 44 => ((*#line 92.28 "ruby.lex"*)Tokens.INCLUDE(!pos, inccol 7)(*#line 879.1 "ruby.lex.sml"*)
)
| 51 => ((*#line 93.28 "ruby.lex"*)Tokens.SELECT(!pos, inccol 6)(*#line 881.1 "ruby.lex.sml"*)
)
| 54 => ((*#line 94.28 "ruby.lex"*)Tokens.IF(!pos, inccol 2)(*#line 883.1 "ruby.lex.sml"*)
)
| 59 => ((*#line 95.28 "ruby.lex"*)Tokens.THEN(!pos, inccol 4)(*#line 885.1 "ruby.lex.sml"*)
)
| 64 => ((*#line 96.28 "ruby.lex"*)Tokens.ELSE(!pos, inccol 4)(*#line 887.1 "ruby.lex.sml"*)
)
| 68 => ((*#line 97.28 "ruby.lex"*)Tokens.LET(!pos, inccol 3)(*#line 889.1 "ruby.lex.sml"*)
)
| 7 => let val yytext=yymktext() in (*#line 80.28 "ruby.lex"*)inccol (size yytext); lex()(*#line 891.1 "ruby.lex.sml"*)
 end
| 71 => ((*#line 98.28 "ruby.lex"*)Tokens.IN(!pos, inccol 2)(*#line 893.1 "ruby.lex.sml"*)
)
| 75 => ((*#line 99.28 "ruby.lex"*)Tokens.END(!pos, inccol 3)(*#line 895.1 "ruby.lex.sml"*)
)
| 79 => ((*#line 100.28 "ruby.lex"*)Tokens.VAR(!pos, inccol 3)(*#line 897.1 "ruby.lex.sml"*)
)
| 81 => ((*#line 101.28 "ruby.lex"*)Tokens.SEMICOLON(!pos, !pos, inccol 1)(*#line 899.1 "ruby.lex.sml"*)
)
| 83 => let val yytext=yymktext() in (*#line 102.28 "ruby.lex"*)Tokens.NEG(yytext, !pos, inccol 1)(*#line 901.1 "ruby.lex.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 103.28 "ruby.lex"*)Tokens.SUM(yytext, !pos, inccol 1)(*#line 903.1 "ruby.lex.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 104.28 "ruby.lex"*)Tokens.SUM(yytext, !pos, inccol 1)(*#line 905.1 "ruby.lex.sml"*)
 end
| 89 => let val yytext=yymktext() in (*#line 105.28 "ruby.lex"*)Tokens.PRODUCT(yytext, !pos, inccol 1)(*#line 907.1 "ruby.lex.sml"*)
 end
| 9 => ((*#line 81.28 "ruby.lex"*)Tokens.LPAREN(!pos, inccol 1)(*#line 909.1 "ruby.lex.sml"*)
)
| 91 => let val yytext=yymktext() in (*#line 106.28 "ruby.lex"*)Tokens.PRODUCT(yytext, !pos, inccol 1)(*#line 911.1 "ruby.lex.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 107.28 "ruby.lex"*)Tokens.POSTFIX(yytext, !pos, inccol 3)(*#line 913.1 "ruby.lex.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 108.28 "ruby.lex"*)Tokens.POSTFIX(yytext, !pos, inccol 2)(*#line 915.1 "ruby.lex.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
